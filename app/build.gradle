/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.3-rc-1/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'com.google.osdetector' version '1.7.3'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()

    // JPRO artifacts
    repositories {
        maven {
            url "https://sandec.jfrog.io/artifactory/repo"
        }
    }
}

ext {
    javaFxPlatform = osdetector.os == 'osx' ? 'mac' : osdetector.os == 'windows' ? 'win' : osdetector.os
    javaFxPlatform = osdetector.arch == 'aarch_64' ? javaFxPlatform + '-aarch64' : javaFxPlatform
}

configurations {
    javafx {
        description = 'Java FX libraries'
    }
    implementation {
        extendsFrom configurations.javafx
    }
    runtime {
        extendsFrom configurations.javafx
    }
}

dependencies {
    javafx group: 'org.openjfx', name: 'javafx-base', version: '21', classifier: javaFxPlatform
    javafx group: 'org.openjfx', name: 'javafx-graphics', version: '21', classifier: javaFxPlatform
    javafx group: 'org.openjfx', name: 'javafx-fxml', version: '21', classifier: javaFxPlatform
    javafx group: 'org.openjfx', name: 'javafx-controls', version: '21', classifier: javaFxPlatform
    javafx group: 'org.openjfx', name: 'javafx-media', version: '21', classifier: javaFxPlatform
    javafx group: 'org.openjfx', name: 'javafx-web', version: '21', classifier: javaFxPlatform
    javafx group: 'org.openjfx', name: 'javafx-swing', version: '21', classifier: javaFxPlatform
    
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    implementation "com.gluonhq:rich-text-area:1.1.1"
    implementation 'com.vladsch.flexmark:flexmark-all:0.64.8'

    implementation "kr.motd.maven:os-maven-plugin:1.7.1"

    implementation "org.apache.maven:maven-model:3.8.6"
    implementation "org.apache.maven:maven-settings:3.8.6"
    implementation "org.apache.maven:maven-settings-builder:3.8.6"
    implementation "org.apache.maven:maven-resolver-provider:3.8.6"
    implementation "org.apache.maven.resolver:maven-resolver-api:1.8.2"
    implementation "org.apache.maven.resolver:maven-resolver-spi:1.8.2"
    implementation "org.apache.maven.resolver:maven-resolver-impl:1.8.2"
    implementation "org.apache.maven.resolver:maven-resolver-connector-basic:1.8.2"
    implementation "org.apache.maven.resolver:maven-resolver-transport-file:1.8.2"
    implementation "org.apache.maven.resolver:maven-resolver-transport-http:1.8.2"

    implementation 'jakarta.json.bind:jakarta.json.bind-api:3.0.0'

    runtimeOnly 'org.eclipse:yasson:3.0.3'
}

ext {
    getJvmModulePath = { -> (configurations.javafx).asPath}
    getJvmAdditionalModules = { ->
        [
            'javafx.base',
            'javafx.controls',
            'javafx.fxml',
            'javafx.graphics',
            'javafx.media',
            'javafx.swing'
        ].toUnique().toSorted().join(',')
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'org.jtaccuino.App'
}

compileJava {
    options.compilerArgs.addAll([
            // lint everithing except preview (as using preview features would generate a warnig and thus break the build)
            '-Xlint:all,-preview',
            '--enable-preview',
            '-Werror',
            '-proc:none',
            '--module-path',
            getJvmModulePath(),
            '--add-modules',
            getJvmAdditionalModules(),
    ])
}

run {
    jvmArgs '--enable-preview'
    jvmArgs '--module-path'
    jvmArgs getJvmModulePath()
    jvmArgs '--add-modules'
    jvmArgs getJvmAdditionalModules()
    jvmArgs '--add-opens'
    jvmArgs 'java.base/jdk.internal.misc=ALL-UNNAMED'
}
